//**************************************************************************
// Codigo del usuario
//
// Domingo Martin Perandres 2013
//
// GPL
//**************************************************************************


#include "user_code.h"
#include <iostream>

using namespace std;

//**************************************************************************
// Funcion para dibujar los vertices de un cubo unidad
//**************************************************************************

void draw_cube()
{
    GLfloat Vertices[8][3]= {{-0.5,-0.5,0.5},{0.5,-0.5,0.5},{0.5,0.5,0.5},{-0.5,0.5,0.5},{-0.5,-0.5,-0.5},{0.5,-0.5,-0.5},{0.5,0.5,-0.5},{-0.5,0.5,-0.5}};

    glColor3f(0,1,0);
    glPointSize(4);

    glBegin(GL_POINTS);
    for (unsigned i=0;i<8;i++){
        glVertex3fv((GLfloat *) &Vertices[i]);
        }
    glEnd();
}

void solido::draw(GLenum modo, color c_fondo, bool ajedrez, int borde, color c_borde, float ancho, bool textura)
{

  if(!ajedrez)
    switch(modo){
      case GL_LINE:
	glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
	break;
      case GL_FILL:
	glPolygonMode(GL_FRONT_AND_BACK,GL_FILL);
	break;
      case GL_POINT:
	glPolygonMode(GL_FRONT_AND_BACK,GL_POINT);
	break;
      case GL_FLAT:
	glPolygonMode(GL_FRONT_AND_BACK,GL_FILL);
	  glShadeModel(GL_FLAT);
	  glEnable(GL_NORMALIZE);
	  break;
      case GL_SMOOTH:
	glPolygonMode(GL_FRONT_AND_BACK,GL_FILL);
	  glShadeModel(GL_SMOOTH);
 	  glEnable(GL_NORMALIZE);
	  break;
    }
  else
    glPolygonMode(GL_FRONT_AND_BACK,GL_FILL);
  
  if(c_fondo.getR()==-1 && c_fondo.getG()==-1 && c_fondo.getB()==-1)
    c_fondo=this->c;
  
  if(borde!=2)
    glColor3f(c_fondo.getR(),c_fondo.getG(),c_fondo.getB());
  else{
    glLineWidth(ancho);
    glColor3f(c_borde.getR(),c_borde.getG(),c_borde.getB());
  }

  glPointSize(ps);
  
  glBegin(GL_TRIANGLES);
  
    for(int i=0;i<this->getNumCaras();i++){
      if(ajedrez)
	if(i%2)
	  glColor3f(aj.first.getR(),aj.first.getG(),aj.first.getB());
	else
	  glColor3f(aj.second.getR(),aj.second.getG(),aj.second.getB());
//    cout<<"CARA "<<i<<" "<<this->getNormalCara(i).getCoord(0)<<" "<<this->getNormalCara(i).getCoord(1)<<" "<<this->getNormalCara(i).getCoord(2)<<endl;
//    cout<<"VERTICE "<<i<<" "<<this->getNormalVertice(i).getCoord(0)<<" "<<this->getNormalVertice(i).getCoord(1)<<" "<<this->getNormalVertice(i).getCoord(2)<<endl;
      if(modo==GL_FLAT)
	glNormal3f(this->getNormalCara(i).getCoord(0),this->getNormalCara(i).getCoord(1),this->getNormalCara(i).getCoord(2));
      
      if(modo==GL_SMOOTH)
	glNormal3f(this->getNormalVertice(this->getCara(i).getIndice(0)).getCoord(0),this->getNormalVertice(this->getCara(i).getIndice(0)).getCoord(1),this->getNormalVertice(this->getCara(i).getIndice(0)).getCoord(2));
      
      if(textura)
	glTexCoord2f(this->getTextura(this->getCara(i).getIndice(0)).getIndice(0),this->getTextura(this->getCara(i).getIndice(0)).getIndice(1)/*,this->getTextura(this->getCara(i).getIndice(0)).getIndice(1)*/);
	
      glVertex3fv(this->getVertice(this->getCara(i).getIndice(0)).getCoord());
      
      if(modo==GL_SMOOTH)
	glNormal3f(this->getNormalVertice(this->getCara(i).getIndice(1)).getCoord(0),this->getNormalVertice(this->getCara(i).getIndice(1)).getCoord(1),this->getNormalVertice(this->getCara(i).getIndice(1)).getCoord(2));
      
      if(textura){//cout<<"BREAK "<<this->getTextura(this->getCara(i).getIndice(0)).getIndice(0)<<" "<<this->getTextura(this->getCara(i).getIndice(0)).getIndice(1)<</*" "<<this->getTextura(this->getCara(i).getIndice(0)).getIndice(2)<<*/" "<<textura<<endl;
	glTexCoord2f(this->getTextura(this->getCara(i).getIndice(1)).getIndice(0),this->getTextura(this->getCara(i).getIndice(1)).getIndice(1)/*,this->getTextura(this->getCara(i).getIndice(1)).getIndice(1)*/);
      }
      glVertex3fv(this->getVertice(this->getCara(i).getIndice(1)).getCoord());
      
      if(modo==GL_SMOOTH)
	glNormal3f(this->getNormalVertice(this->getCara(i).getIndice(2)).getCoord(0),this->getNormalVertice(this->getCara(i).getIndice(2)).getCoord(1),this->getNormalVertice(this->getCara(i).getIndice(2)).getCoord(2));
      
      if(textura)
	glTexCoord2f(this->getTextura(this->getCara(i).getIndice(2)).getIndice(0),this->getTextura(this->getCara(i).getIndice(2)).getIndice(1)/*,this->getTextura(this->getCara(i).getIndice(2)).getIndice(1)*/);
      
      glVertex3fv(this->getVertice(this->getCara(i).getIndice(2)).getCoord());
    }
    
  glEnd();
  
  if (modo==GL_FLAT || modo==GL_SMOOTH){
    glDisable(GL_NORMALIZE);
    glDisable(GL_LIGHTING);
  }
  
  if(borde==1 && modo!=GL_LINE)
    if(!getAristas().empty())
      drawAristas(c_borde,ancho);
    else
      draw(GL_LINE,c_fondo,0,2,c_borde,ancho);
  glLineWidth(1.0);
  
}

void solido::drawAristas(color c_borde, float ancho){
  
  glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
  
  glColor3f(c_borde.getR(),c_borde.getG(),c_borde.getB());
  
  glLineWidth(ancho);
  
  glBegin(GL_LINES);
    for(int i=0;i<this->getNumAristas();i++){
      glVertex3fv(this->getVertice(this->getArista(i).getIndice(0)).getCoord());
      glVertex3fv(this->getVertice(this->getArista(i).getIndice(1)).getCoord());
    }
  glEnd();
  
  glLineWidth(1.0);
  
}

void solido::drawNormalVertice(float k,color col)
{
  glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
  
  glColor3f(col.getR(),col.getG(),col.getB());
  
  glBegin(GL_LINES);
    for(int i=0;i<this->getNumVertices();i++){
      glVertex3fv(this->getVertice(i).getCoord());
      vertice aux = vertice((this->getVertice(i).getCoord(0))+(k*getNormalVertice(i).getCoord(0)),	(this->getVertice(i).getCoord(1))+(k*getNormalVertice(i).getCoord(1)),
	(this->getVertice(i).getCoord(2))+(k*getNormalVertice(i).getCoord(2)));
      glVertex3fv(aux.getCoord());
    }
  glEnd();
}

void solido::crearRevolucion(int ndiv, vector<vertice> v,bool btextura){

  float angulo,x,y,z;
  int nPerfil= v.size(),s=0,nivel=nPerfil;
  bool primeroCero = v[0].getCoord(0)>=-0.0001 && v[0].getCoord(0)<=0.0001 && v[0].getCoord(2)>=-0.0001 && v[0].getCoord(2)<=0.0001, 
       ultimoCero = v[nPerfil-1].getCoord(0)>=-0.0001 && v[nPerfil-1].getCoord(0)<=0.0001 && v[nPerfil-1].getCoord(2)>=-0.0001 && v[nPerfil-1].getCoord(2)<=0.0001;
  
  if(primeroCero)
    s=1;
  if(ultimoCero)
    nivel=nPerfil-1;
  
  int a=0;
  
  vector<float> d;
  d.push_back(0);
  
  for(int i=s+1; i<nivel-1;i++){//cout<<"D: "<<d[a]<<endl;
      d.push_back(d[a]+abs(v[i+1].getCoord(1)-v[i].getCoord(1)));
      a++;
  }
  a=0;//cout<<"D: "<<d[nivel-2]<<" "<<btextura<<endl;
  for(int i=s; i<nivel;i++){
    //for(int j=ndiv;j>0;j--){
      
//     d=0;
    
    for(int j=0;j<ndiv;j++){
      
      angulo=2*M_PI*j/ndiv;
      
      x=sqrt(v[i].getCoord(0)*v[i].getCoord(0)+v[i].getCoord(2)*v[i].getCoord(2))*cos(angulo);
      y=v[i].getCoord(1);
      z=sqrt(v[i].getCoord(0)*v[i].getCoord(0)+v[i].getCoord(2)*v[i].getCoord(2))*sin(angulo);
      
      insertarVertice(x,y,z,tabla_textura(j/(float)(ndiv-1),d[a]/d[nivel-2]));
//       d[a]=d+abs(v[i+1].getCoord(1)-v[i].getCoord(1));
      
    }
    a++;
  }
  
  if(btextura){
    a=0;
    for(int i=0;i<nivel;i++){
      insertarVertice(v[i].getCoord(1),v[i].getCoord(1),v[i].getCoord(1),tabla_textura(1.0,d[a]/d[nivel-1]));
      a++;
    }
  }
  
  insertarVertice(0,v[0].getCoord(1),0);
  insertarVertice(0,v[nPerfil-1].getCoord(1),0);
  
  int naux=nPerfil-1;
  if(primeroCero)
    naux--;
  if(ultimoCero)
    naux--;
  
  for(int i=0;i<naux;i++){
    for(int j=0;j<ndiv;j++){
      insertarCara(	((j+1)%ndiv)+(i*ndiv),         j+(i*ndiv),	  ((j+1)%ndiv)+((i+1)*ndiv));
      insertarCara(	((j+1)%ndiv)+((i+1)*ndiv),     j+(i*ndiv),       j+((i+1)*ndiv));
      insertarArista(	((j+1)%ndiv)+(i*ndiv),         j+(i*ndiv));
      insertarArista(	(j+(i*ndiv)),j+((i+1)*ndiv));
    }
  }
  
  for(int i=0;i<ndiv;i++){
    insertarCara((i+1)%ndiv,getNumVertices()-2,i);
    insertarArista(i,(i+1)%ndiv);
    if(primeroCero)
      insertarArista(i,getNumVertices()-2);
  }
  
  for(int i=0;i<ndiv;i++){
    insertarCara(i+(naux)*ndiv,getNumVertices()-1,(i+1)%ndiv+(naux)*ndiv);
    insertarArista(i+(naux)*ndiv,(i+1)%ndiv+(naux)*ndiv);
    if(ultimoCero)
      insertarArista(i+(naux)*ndiv,getNumVertices()-1);
  }
  
//    crearNormales();
}

vector<int> solido::carasPorVertice(vertice v){
    
  vector<int> indicesCaras;
    
  for(int i=0;i<getNumCaras();i++){
      
    if((getVertice(getCara(i).getIndice(0))==v && 1) || getVertice(getCara(i).getIndice(1))==v || getVertice(getCara(i).getIndice(2))==v)
      indicesCaras.push_back(i);
      
    }
    
  return indicesCaras;
    
}

void solido::crearNormales(){
    
  vector<float> ab(3,0),bc(3,0);
  float cx,cy,cz,moduloCara,moduloVertice;
  /*
  if(!cnormales.empty())
    cnormales.clear();
  if(!vnormales.empty())
    vnormales.clear();
  */
  // Crear normales de las caras
  for(int i=0;i<getNumCaras();i++){
      
    ab[0]=getVertice(getCara(i).getIndice(1)).getCoord(0)-getVertice(getCara(i).getIndice(0)).getCoord(0);
    ab[1]=getVertice(getCara(i).getIndice(1)).getCoord(1)-getVertice(getCara(i).getIndice(0)).getCoord(1);
    ab[2]=getVertice(getCara(i).getIndice(1)).getCoord(2)-getVertice(getCara(i).getIndice(0)).getCoord(2);
      
    bc[0]=getVertice(getCara(i).getIndice(2)).getCoord(0)-getVertice(getCara(i).getIndice(0)).getCoord(0);
    bc[1]=getVertice(getCara(i).getIndice(2)).getCoord(1)-getVertice(getCara(i).getIndice(0)).getCoord(1);
    bc[2]=getVertice(getCara(i).getIndice(2)).getCoord(2)-getVertice(getCara(i).getIndice(0)).getCoord(2);
      
    moduloCara=sqrt(pow(ab[1]*bc[2]-ab[2]*bc[1],2)+pow(ab[2]*bc[0]-ab[0]*bc[2],2)+pow(ab[0]*bc[1]-ab[1]*bc[0],2));
      
    cx=((ab[1]*bc[2])-(ab[2]*bc[1]))/moduloCara;
    cy=((ab[2]*bc[0])-(ab[0]*bc[2]))/moduloCara;
    cz=((ab[0]*bc[1])-(ab[1]*bc[0]))/moduloCara;
      
    setNormalCara(i,cx,cy,cz);
  }

  // Crear normales de los vertices
  for(int i=0;i<getNumVertices();i++){
      
    vector<int> indicesCaras;
    normal cara_j;
    float vx=0,vy=0,vz=0;
      
    indicesCaras=carasPorVertice(getVertice(i));
    vector<normal> normalesCarasRepetidas;
      
    //Sumar normales de las caras que comparten el vertice
    for(int j=0;j<indicesCaras.size();j++){
	
      cara_j=normal(getNormalCara(indicesCaras[j]).getCoord(0),getNormalCara(indicesCaras[j]).getCoord(1),getNormalCara(indicesCaras[j]).getCoord(2));
      bool repeitdo=false;
      
      for(int k=0;k<normalesCarasRepetidas.size();k++){
	if(normalesCarasRepetidas[k]==cara_j){
	  repeitdo=true;
	  break;
	}
      }
      
      if(!repeitdo){
	normalesCarasRepetidas.push_back(cara_j);
	vx+=getNormalCara(indicesCaras[j]).getCoord(0);
	vy+=getNormalCara(indicesCaras[j]).getCoord(1);
	vz+=getNormalCara(indicesCaras[j]).getCoord(2);
      }
    }
    
    moduloVertice=sqrt(pow(vx,2)+pow(vy,2)+pow(vz,2));
      
//     vnormales[i]=normal(vx/moduloVertice,vy/moduloVertice,vz/moduloVertice);
    setNormalVertice(i,vx/moduloVertice,vy/moduloVertice,vz/moduloVertice);
  }
}

//**************************************************************************
// Funcion para dibujar vertices
//**************************************************************************

void draw_vertices(vector<float> &Vertices, color c, int ps)
{
  
  glColor3f(c.getR(),c.getG(),c.getB());
  glPointSize(ps);
  glBegin(GL_POINTS);
    for(int i=0;i<Vertices.size();i+=3)
      glVertex3fv(&Vertices[i]);
  glEnd();
  /*
  glEnableClientState(GL_VERTEX_ARRAY);
  glVertexPointer(3,GL_FLOAT,0,&Vertices[0]);
  glColor3f(c.getR(),c.getG(),c.getB());
  glPointSize(ps);
  glDrawArrays(GL_POINTS,0,Vertices.size());
  glDisableClientState (GL_VERTEX_ARRAY);*/
  
}

//**************************************************************************
// Funcion para construir modelos solidos de poligonos
//**************************************************************************

void construir_cubo(float ancho, float alto, float profundidad, solido *cubo){
  
  cubo->insertarVertice(-(ancho)/2,-(alto)/2,(profundidad)/2);
  cubo->insertarVertice((ancho)/2,-(alto)/2,(profundidad)/2);
  cubo->insertarVertice((ancho)/2,(alto)/2,(profundidad)/2);
  cubo->insertarVertice(-(ancho)/2,(alto)/2,(profundidad)/2);
  
  cubo->insertarVertice(-(ancho)/2,-(alto)/2,-(profundidad)/2);
  cubo->insertarVertice((ancho)/2,-(alto)/2,-(profundidad)/2);
  cubo->insertarVertice((ancho)/2,(alto)/2,-(profundidad)/2);
  cubo->insertarVertice(-(ancho)/2,(alto)/2,-(profundidad)/2);
  
  cubo->insertarCara(0,1,3);
  cubo->insertarCara(3,1,2);
  cubo->insertarCara(1,5,2);
  cubo->insertarCara(5,6,2);
  cubo->insertarCara(5,4,6);
  cubo->insertarCara(4,7,6);
  cubo->insertarCara(4,0,7);
  cubo->insertarCara(0,3,7);
  cubo->insertarCara(4,5,0);
  cubo->insertarCara(5,1,0);
  cubo->insertarCara(3,2,7);
  cubo->insertarCara(2,6,7);
  
  cubo->insertarArista(0,1);
  cubo->insertarArista(1,2);
  cubo->insertarArista(2,3);
  cubo->insertarArista(3,0);
  
  cubo->insertarArista(4,5);
  cubo->insertarArista(5,6);
  cubo->insertarArista(6,7);
  cubo->insertarArista(7,4); 
  
  cubo->insertarArista(0,4);
  cubo->insertarArista(1,5);
  cubo->insertarArista(2,6);
  cubo->insertarArista(3,7);  
  
//   cubo->crearNormales();
}

void construir_piramide(float tam, solido *piramide,bool estado){
  
  piramide->insertarVertice(-tam,-tam,tam);
  piramide->insertarVertice(tam,-tam,tam);
  piramide->insertarVertice(tam,-tam,-tam);
  piramide->insertarVertice(-tam,-tam,-tam);
  
  if(!estado)
    piramide->insertarVertice(0,tam,0); // piramide normal
  else
    piramide->insertarVertice(-tam,tam,0); // piramide "tipo 2"
  
  piramide->insertarCara(0,1,4);
  piramide->insertarCara(1,2,4);
  piramide->insertarCara(2,3,4);
  piramide->insertarCara(3,0,4);
  piramide->insertarCara(3,2,0);
  piramide->insertarCara(2,1,0);
  
  piramide->insertarArista(0,1);
  piramide->insertarArista(1,2);
  piramide->insertarArista(2,3);
  piramide->insertarArista(3,0);
  
  piramide->insertarArista(0,4);
  piramide->insertarArista(1,4);
  piramide->insertarArista(2,4);
  piramide->insertarArista(3,4);
  
//   piramide->crearNormales();

}

void construir_esfera(float r,int nPerfil, solido *esfera, int estado){
  
  vector<vertice> aux;
  float angulo;
  
  for(int i=0;i<=nPerfil;i++){
    switch(estado){
      case 0:
	angulo=(M_PI*i/nPerfil)-M_PI/2; //esfera
	break;
      case 1:
	angulo=((M_PI/2)*i/nPerfil); //semiesfera superior
	break;
      case 2:
	angulo=((M_PI/2)*i/nPerfil)-M_PI/2; //semiesfera inferior
	break;
    }
    
    aux.push_back(vertice(r*cos(angulo),r*sin(angulo),0));
  }
  
  esfera->crearRevolucion(nPerfil,aux);
  
}

vector<vertice> toVectorVertices(vector<float> ver){
  
  vector<vertice> aux;
  for(int i=0;i<ver.size();i+=3)
      aux.push_back(vertice(ver[i],ver[i+1],ver[i+2]));
  return aux;
}

void luces( )
{ GLfloat luz_difusa[]={1.0,1.0,1.0,1.0 },
luz_especular[]={1.0,1.0,1.0,1.0 },
// luz_posicion[]={5.0,10.0,15.0,1.0};
luz_posicion[]={3.0,15,4.0,0.0};
GLfloat luz_difusa2[]={1.0,1.0,1.0,1.0 },
luz_especular2[]={1.0,1.0,1.0,1.0 },
// luz_posicion[]={5.0,10.0,15.0,1.0};
luz_posicion2[]={-9.0,0.0,-9.0,0};
// luz_posicion[]={7.0,3.0,7.0,1.0};
/*
glLightfv (GL_LIGHT0, GL_AMBIENT, luz_difusa2);
glLightfv (GL_LIGHT0, GL_DIFFUSE, luz_difusa2);
glLightfv (GL_LIGHT0, GL_SPECULAR, luz_especular2);
glLightfv (GL_LIGHT0, GL_POSITION, luz_posicion2);*/
glLightfv (GL_LIGHT1, GL_DIFFUSE, luz_difusa);
glLightfv (GL_LIGHT1, GL_SPECULAR, luz_especular);
glLightfv (GL_LIGHT1, GL_POSITION, luz_posicion);
glEnable (GL_LIGHTING);
glDisable (GL_LIGHT0);
glEnable (GL_LIGHT1); }

void objetos(bool mio )
{ 
  solido *esfera=new solido();
  construir_esfera(1,20,esfera);
  solido *esfera2=new solido();
  construir_esfera(0.7,20,esfera2);
  esfera->crearNormales();
  esfera2->crearNormales();
  
  GLfloat mat_difuso1[]={1.0,0.5,0.5,1.0 },
  mat_difuso2[]={0.0,0.5,1.0,1.0 },
  mat_especular2[]={0.6,0.6,0.6,1.0},
  mat_brillo2=20;
  
  GLfloat oro_ambiente[]={0.247725,0.1995,0.745,1.0 },
  oro_difuso[]={0.75164,0.60648,0.22648,1.0 },
  oro_especular[]={0.628281,0.555802,0.366065,1.0},
  oro_brillo=51.2;
  
   
  glMaterialfv(GL_FRONT, GL_AMBIENT,oro_ambiente);
  glMaterialfv(GL_FRONT, GL_DIFFUSE,oro_difuso);
  glMaterialfv(GL_FRONT, GL_SPECULAR,oro_especular);
  glMaterialf(GL_FRONT, GL_SHININESS,oro_brillo);
  
//   glMaterialfv(GL_FRONT, GL_DIFFUSE,mat_difuso1);
  if(mio) esfera->draw(GL_SMOOTH,color(1,0,0),0,0,color(1,0,0),2);
  else glutSolidSphere(1.0,20,20);
  
  
  glMaterialfv(GL_FRONT, GL_DIFFUSE,mat_difuso2);
  glMaterialfv(GL_FRONT, GL_SPECULAR,mat_especular2);
  glMaterialf(GL_FRONT, GL_SHININESS,mat_brillo2);
  glTranslatef(-0.4,0.0,0.7);
  if(mio) esfera2->draw(GL_SMOOTH,color(1,1,0),0,0,color(1,0,0),2);
  else glutSolidSphere(0.7,15,15); 
  
}

void escenaP4(solido * peon,textura *tex, solido *lata, textura *tex_lata, solido *lata_inf, solido * lata_sup){
  
  float pos[]={0,10,2,0};
  fuente_luz *luz=new fuente_luz(color(1,1,1),1,pos);
  float pos2[]={3,10,4,0};
  fuente_luz *luz2=new fuente_luz(color(1,1,1),1,pos2,GL_LIGHT2);
  float pos3[]={6,10,6,0};
  fuente_luz *luz3=new fuente_luz(color(1,1,1),1,pos3,GL_LIGHT3);
  float pos4[]={0,0.5,2,0};
  fuente_luz *luz4=new fuente_luz(color(1,1,1),0,pos4,GL_LIGHT4);
  
  // oro
  /*GLfloat oro_ambiente[]={0.247725,0.1995,0.0745,1.0 },
  oro_difuso[]={0.75164,0.60648,0.22648,1.0 },
  oro_especular[]={0.628281,0.555802,0.366065,1.0},
  oro_brillo=51.2;*/
  
  //cromo
  GLfloat cromo_ambiente[]={0.25,0.25,0.25,1.0 },
  cromo_difuso[]={0.4,0.4,0.4,1.0 },
  cromo_especular[]={0.774597,0.774597,0.774597,1.0},
  cromo_brillo=76.8;
  
  //oro pulido
  GLfloat oro_ambiente[]={0.247725,0.2245,0.0645,1.0 },
  oro_difuso[]={0.34615,0.3143,0.0903,1.0 },
  oro_especular[]={0.797357,0.723991,0.208006,1.0},
  oro_brillo=51.2;
  
  GLfloat mat_ambiente[]={0,0,0,0},
  mat_difuso[]={1.0,1.0,1.0,0.0 },
  mat_especular[]={0.6,0.6,0.6,0.0},
  mat_brillo=20;  //*/
  
  //perla
  GLfloat mat_ambiente2[]={0.25,0.20725,0.20725,0.922},
  mat_difuso2[]={1.0,0.829,0.829,0.922},
  mat_especular2[]={0.0,0.0,0.0,0.922},
  mat_brillo2=11.264;//*/
  
  //Negro
  GLfloat pna[]={0,0,0,0},
  pnd[]={0,0,0,1.0 },
  pne[]={0.5,0.5,0.5,1.0},
  pnb=20;//*/
  
  //Obsidiana
  /*GLfloat pna[]={0.05375,0.05,0.06625,0.82},
  pnd[]={0.18275,0.17,0.22525,0.82 },
  pne[]={0.332741,0.328634,0.346435,0.82},
  pnb=38.4;*/
  
  material *blanco=new material(mat_ambiente,mat_difuso,mat_especular,mat_brillo);
  material *madera=new material(mat_ambiente,mat_difuso,mat_especular,mat_brillo,tex);
  material *perla=new material(mat_ambiente2,mat_difuso2,mat_especular2,mat_brillo2);
  material *oro=new material(oro_ambiente,oro_difuso,oro_especular,oro_brillo);
  material *cromo=new material(cromo_ambiente,cromo_difuso,cromo_especular,cromo_brillo);
  material *negro=new material(pna,pnd,pne,pnb);
  
  
  luz4->activar();
  tex_lata->activar();
  glPushMatrix();
  blanco->activar();
  lata->draw(GL_SMOOTH,color(1,1,1),0,0,color(0,1,1),2,1);
  glPopMatrix();
  tex_lata->desactivar();
  
//   luz4->activar();
  cromo->activar();
  lata_inf->draw(GL_SMOOTH,color(/*0.75,0.75,0.75*/0,1,0),0,0,color(1,0,0),2);
  
//   luz4->activar();
  lata_sup->draw(GL_SMOOTH,color(/*0.75,0.75,0.75*/0,1,0),0,0,color(1,0,0),2);
  cromo->desactivar();
  
  luz->activar();//*/
//   luz4->activar();
  
//    luces();
  
//   tex->activar();
  glPushMatrix();
  glTranslatef(0,0,1);
  glScalef(0.17,0.17,0.17);
  glTranslatef(0,1.4,0);
  madera->activar();
  peon->draw(GL_SMOOTH,color(1,1,1),0,0,color(0,1,1),2);
  madera->desactivar();
  glPopMatrix();
//   tex->desactivar();
  
  
//   luz2->activar();
//   luz2->activar();
//   luces();
  glPushMatrix();
  glTranslatef(0.4,0,1.1);
  glScalef(0.17,0.17,0.17);
  glTranslatef(0,1.4,0);
  perla->activar();
  peon->draw(GL_SMOOTH,color(0,1,0),0,0,color(0,1,1),2);
  glPopMatrix();
  
//    luz3->activar();
//   luz2->activar();
//   luces();
    
  glPushMatrix();
  glTranslatef(0.8,0,1.2);
  glScalef(0.17,0.17,0.17);
  glTranslatef(0,1.4,0);
  negro->activar();
  peon->draw(GL_SMOOTH,color(0,0,1),0,0,color(0,1,1),2);
  glPopMatrix();
  
//   luz->desactivar();
}
